Final report **************************************
GPT Prompt: Write a C program that calculates the 500,000th prime number efficiently.

Number of cycles: 300
GPT Errors: 0
GPT prompt time min: 9.2    max: 25.99    avg: 17.14
Duplicate code: 0    Bad compiles: 30    Bad run outputs: 187
Min run time: 0.135   max: 6.288   avg: 2.269
Total success: 83

Index of best code: 4
**** Best Code Follows ************

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>

#define MAX_SIZE 7368787   // Approximate value for the upper limit of the 500,000th prime number

int main() {
    bool* isPrime = (bool*)malloc((MAX_SIZE + 1) * sizeof(bool));
    if (!isPrime) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Initialize all numbers as prime
    for (int i = 2; i <= MAX_SIZE; i++) {
        isPrime[i] = true;
    }

    // Apply the Sieve of Eratosthenes algorithm
    int sqrtLimit = sqrt(MAX_SIZE);
    for (int i = 2; i <= sqrtLimit; i++) {
        if (isPrime[i]) {
            for (int j = i * i; j <= MAX_SIZE; j += i) {
                isPrime[j] = false;
            }
        }
    }

    // Count the number of primes
    int primeCount = 0;
    int primeNumber;
    for (int i = 2; i <= MAX_SIZE; i++) {
        if (isPrime[i]) {
            primeCount++;
            if (primeCount == 500000) {
                primeNumber = i;
                break;
            }
        }
    }

    printf("The 500,000th prime number is: %d\n", primeNumber);

    free(isPrime);
    return 0;
}
